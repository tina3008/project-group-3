import{a as f,S as m,N as v,K as w,P as y,i as h,A as g}from"./assets/vendor-f33cd94b.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))o(r);new MutationObserver(r=>{for(const n of r)if(n.type==="childList")for(const c of n.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&o(c)}).observe(document,{childList:!0,subtree:!0});function s(r){const n={};return r.integrity&&(n.integrity=r.integrity),r.referrerPolicy&&(n.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?n.credentials="include":r.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function o(r){if(r.ep)return;r.ep=!0;const n=s(r);fetch(r.href,n)}})();const b="https://portfolio-js.b.goit.study/api";async function L(e){const s=`${b}/reviews`;try{return(await f.get(s)).data}catch(o){throw console.error("Error fetching images:",o),o}}const u=document.querySelector(".reviews-list");function E(e,t,s,o){return`
     <li class="reviews-list-items swiper-slide" data-id="${e}">
     <img class="reviews-image" src="${s}" alt="Photo" 
            width="48"
            height="48"
            loading="lazy" />
          <div class="reviews-text-content">
            <h3 class="reviews-name-header">${t}</h3>
            <p class="reviews-main-text">${o}</p>
          </div>
        </li>
  `}function d(){const e='<p class="end-message">Not found</p>';u.insertAdjacentHTML("afterend",e)}function N(e){return e.map(({_id:t,author:s,avatar_url:o,review:r})=>E(t,s,o,r)).join("")}function O(e){const t=N(e);u.insertAdjacentHTML("beforeend",t)}const P=document.querySelector(".swiper"),i=document.querySelector(".button-next-svg"),a=document.querySelector(".button-prev"),q=new m(P,{modules:[v,w,y],navigation:{nextEl:i,prevEl:a},direction:"horizontal",autoHeight:!1,autoWidth:!1,watchOverflow:!0,keyboard:{enabled:!0,onlyInViewport:!0,pageUpDown:!0},breakpoints:{320:{slidesPerView:"auto",spaceBetween:18},767:{slidesPerView:2,spaceBetween:16},1280:{slidesPerView:3,spaceBetween:16},1440:{slidesPerView:4,spaceBetween:16}}});q.update();async function S(){try{const e=await L();e.length===0?d():O(e)}catch{h.error({color:"red",message:"❌ Sorry, there is an error. Please try again later!",position:"topRight"}),d()}}const T=new MutationObserver(e=>{e.forEach(t=>{t.attributeName==="class"&&(i.classList.contains("swiper-button-disabled")?(i.style.opacity="0.5",i.style.cursor="not-allowed"):(i.style.opacity="1",i.style.cursor="pointer"))})});T.observe(i,{attributes:!0});const B=new MutationObserver(e=>{e.forEach(t=>{t.attributeName==="class"&&(a.classList.contains("swiper-button-disabled")?(a.style.opacity="0.5",a.style.cursor="not-allowed"):(a.style.opacity="1",a.style.cursor="pointer"))})});B.observe(a,{attributes:!0});S();document.getElementById("profile-link").addEventListener("click",function(e){e.preventDefault(),document.getElementById("profile").classList.toggle("active");const t=document.getElementById("dropdown");t.classList.contains("active")?(t.classList.remove("active"),t.style.opacity=0):(t.classList.add("active"),setTimeout(()=>{t.style.opacity=1},10))});new g(".faq-list",{duration:400,showMultiple:!0});const p=document.querySelector("#modal-open"),I=document.querySelector("#modalBtn"),A=document.querySelector("#send-button");I.addEventListener("click",e=>{e.preventDefault(),p.classList.remove("is-open")});A.addEventListener("submit",e=>{p.classList.add("is-open")});const l="my-cache-v1",M=["/src/img","/src/js","/src/partials","/src/index.html","/src/main.js"];self.addEventListener("install",e=>{e.waitUntil(caches.open(l).then(t=>(console.log("Opened cache"),t.addAll(M))))});self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(t=>Promise.all(t.map(s=>{if(s!==l)return caches.delete(s)}))))});self.addEventListener("fetch",e=>{e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request).then(s=>{if(!s||s.status!==200||s.type!=="basic")return s;const o=s.clone();return caches.open(l).then(r=>{r.put(e.request,o)}),s})))});self.addEventListener("install",e=>{console.log("Service Worker installed")});self.addEventListener("activate",e=>{console.log("Service Worker activated")});self.addEventListener("fetch",e=>{console.log("Fetching:",e.request.url)});
//# sourceMappingURL=commonHelpers.js.map
